#!/usr/bin/env node

const express = require('express');
const path = require('path');
const fs = require('fs');
const open = require('open');


const app = express();
const port = 3250;

app.use(express.urlencoded({ extended: true }));

// –ö–∞—Ç–∞–ª–æ–≥–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
const FOLDERS = {
  "apps": "–ñ–∏–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (node-red, icecast, autossh –∏ –¥—Ä.)",
  "scripts": "–£—Ç–∏–ª–∏—Ç—ã, —Å—Ç–∞—Ä—Ç–µ—Ä—ã, –¥–µ–ø–ª–æ–π –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã",
  "build-sources": "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏ (ffmpeg, –∫–∞—Å—Ç–æ–º–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –∏ —Ç.–¥.)",
  "bin": "–¢–≤–æ–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ/—Å–∫–∞—á–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏",
  "data": "–ë–∞–∑—ã, –¥–∞–º–ø—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
  "config": "–ö–æ–Ω—Ñ–∏–≥–∏ –∏ .env, —à–∞–±–ª–æ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫",
  "docs": "Markdown-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∑–∞–º–µ—Ç–∫–∏, howto",
  "logs": "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤",
  "public": "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç–∞—Ç–∏–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ nginx –∏ —Ç.–ø.)",
  "locales": "–§–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å)",
  "legacy": "–ê—Ä—Ö–∏–≤ —Å—Ç–∞—Ä–æ–≥–æ –º—É—Å–æ—Ä–∞ –∏ –±—ç–∫–∞–ø—ã"
};

const SCRIPTS = {
  "scripts/restart-all.sh": "–†–µ—Å—Ç–∞—Ä—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
  "scripts/backup.sh": "–ë—ç–∫–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö/—Å–µ—Ä–≤–∏—Å–æ–≤",
  "scripts/menu.sh": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ entrypoint –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  "scripts/build-ffmpeg.sh": "–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ ffmpeg (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–Ω–∞—Ä—è)"
};

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —á–µ–∫–±–æ–∫—Å—ã, —á—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
app.get('/', (req, res) => {
  const pwd = process.cwd();
  let foldersForm = '';
  for (const [folder, desc] of Object.entries(FOLDERS)) {
    const exists = fs.existsSync(path.join(pwd, folder));
    foldersForm += `<label><input type="checkbox" name="folders" value="${folder}" ${exists ? 'checked' : ''}> ${folder} ${exists ? '‚úÖ' : ''}<span style="color:#888"> ‚Äî ${desc}</span></label><br>`;
  }
  let scriptsForm = '';
  for (const [script, desc] of Object.entries(SCRIPTS)) {
    const exists = fs.existsSync(path.join(pwd, script));
    scriptsForm += `<label><input type="checkbox" name="scripts" value="${script}" ${exists ? 'checked' : ''}> ${script} ${exists ? '‚úÖ' : ''}<span style="color:#888"> ‚Äî ${desc}</span></label><br>`;
  }

  res.send(`
    <html>
      <head>
        <title>Cookiecutter infra (Express UI)</title>
        <meta charset="utf-8"/>
        <style>
          body { font-family: monospace; padding:2rem; }
          .block { margin-bottom:2rem;}
          label { display:block; margin-bottom:0.5rem;}
          h2 { margin-bottom:1rem;}
        </style>
      </head>
      <body>
        <h1>üí° Cookiecutter –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã</h1>
        <form method="POST">
          <div class="block">
            <h2>–ö–∞—Ç–∞–ª–æ–≥–∏</h2>
            ${foldersForm}
          </div>
          <div class="block">
            <h2>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã</h2>
            ${scriptsForm}
          </div>
          <button type="submit">–°–æ–∑–¥–∞—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω–æ–µ</button>
        </form>
        <hr>
        <p style="color: #555;">P.S. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ ‚Äî –ø–æ–ª–æ–∂–∏ –≤ –∫–∞–∂–¥—ã–π README.md, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –¥–ª—è —á–µ–≥–æ –æ–Ω.<br>
        –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä—É—á–Ω—É—é: <code>mkdir -p apps scripts build-sources bin data config docs logs public locales legacy</code></p>
      </body>
    </html>
  `);
});

// POST: —Å–æ–∑–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ –ø—É—Å—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
app.post('/', (req, res) => {
  let body = '';
  req.on('data', chunk => { body += chunk; });
  req.on('end', () => {
    const params = new URLSearchParams(body);
    const created = [];

    // –ö–∞—Ç–∞–ª–æ–≥–∏
    for (const folder of params.getAll('folders')) {
      const dir = path.join(process.cwd(), folder);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        created.push(`–ö–∞—Ç–∞–ª–æ–≥ <b>${folder}</b> —Å–æ–∑–¥–∞–Ω`);
      }
    }

    // –°–∫—Ä–∏–ø—Ç—ã
    for (const script of params.getAll('scripts')) {
      const file = path.join(process.cwd(), script);
      const dir = path.dirname(file);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      if (!fs.existsSync(file)) {
        fs.writeFileSync(file, "#!/bin/bash\n\n# TODO: –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π —Å–∫—Ä–∏–ø—Ç\n", { mode: 0o755 });
        created.push(`–°–∫—Ä–∏–ø—Ç <b>${script}</b> —Å–æ–∑–¥–∞–Ω`);
      }
    }

    res.send(`
      <html>
        <head>
          <meta charset="utf-8"/>
          <style>body{font-family:monospace;padding:2rem}</style>
        </head>
        <body>
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
          <ul>
            ${created.length ? created.map(c => `<li>${c}</li>`).join('') : '<li>–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ ‚Äî –≤—Å—ë —É–∂–µ –±—ã–ª–æ</li>'}
          </ul>
          <a href="/">‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</a>
        </body>
      </html>
    `);
  });
});

// –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(port, () => {
  console.log(`–û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${port}`);
//   open(`http://localhost:${port}`);
});
